{{- $root := . -}}
{{- $data := fromToml (include ".chezmoidata.toml") -}}
{{- $defaults := $data.defaults | default (dict) -}}
{{- $host := (index ($data.hosts | default (dict)) .chezmoi.hostname) | default (dict) -}}
{{- $fishDefaults := (index $defaults "fish") | default (dict) -}}
{{- $fishHost := (index $host "fish") | default (dict) -}}
{{- $defaultPaths := (index $fishDefaults "paths") | default (list) -}}
{{- $hostPaths := (index $fishHost "paths") | default (list) -}}
{{- $envMap := merge ((index $fishDefaults "env") | default (dict)) ((index $fishHost "env") | default (dict)) -}}
{{- $proxyConfig := merge ((index $fishDefaults "proxies") | default (dict)) ((index $fishHost "proxies") | default (dict)) -}}
{{- $home := .chezmoi.homeDir -}}

if status is-interactive
    # Shell initialization only needed for interactive sessions.
end

# Homebrew (Apple Silicon default path)
if test -f /opt/homebrew/bin/brew
    eval (/opt/homebrew/bin/brew shellenv | string collect)
end

# Runtime manager via mise
if type -q mise
    mise activate fish | source
end

# Runtime manager via direnv (automatic after mise activates hook)
if type -q direnv
    direnv hook fish | source
end

# Path management driven by chezmoi data. Directories that do not yet exist are
# skipped to keep PATH clean on fresh machines.
{{- range $p := $defaultPaths }}
{{- $resolved := "" -}}
{{- if hasPrefix "~" $p -}}
    {{- $resolved = printf "%s%s" $home (trimPrefix "~" $p) -}}
{{- else if hasPrefix "/" $p -}}
    {{- $resolved = $p -}}
{{- else -}}
    {{- $resolved = joinPath $home $p -}}
{{- end }}
set -l __path "{{ $resolved }}"
if test -d $__path
    fish_add_path $__path
end
{{- end }}
{{- range $p := $hostPaths }}
{{- $resolved := "" -}}
{{- if hasPrefix "~" $p -}}
    {{- $resolved = printf "%s%s" $home (trimPrefix "~" $p) -}}
{{- else if hasPrefix "/" $p -}}
    {{- $resolved = $p -}}
{{- else -}}
    {{- $resolved = joinPath $home $p -}}
{{- end }}
set -l __path "{{ $resolved }}"
if test -d $__path
    fish_add_path $__path
end
{{- end }}

# Export environment variables configured in chezmoidata.
{{- range $key, $value := $envMap }}
{{- $val := $value -}}
{{- if hasPrefix "~" $value -}}
    {{- $val = printf "%s%s" $home (trimPrefix "~" $value) -}}
{{- else if hasPrefix "/" $value -}}
    {{- $val = $value -}}
{{- end }}
set -gx {{ $key }} "{{ $val }}"
{{- end }}

# Ensure PNPM is configured globally per host.
if not set -q PNPM_HOME
    set -gx PNPM_HOME "$HOME/Library/pnpm"
else
    set -gx PNPM_HOME "$PNPM_HOME"
end
if not string match -q -- $PNPM_HOME $PATH
    set -gx PATH "$PNPM_HOME" $PATH
end

# HTTP proxy configuration (only emitted when values are populated).
{{- with $proxyConfig }}
    {{- if or .http .https .no_proxy }}
        {{- if .http }}
set -gx HTTP_PROXY "{{ .http }}"
set -gx http_proxy "{{ .http }}"
        {{- end }}
        {{- if .https }}
set -gx HTTPS_PROXY "{{ .https }}"
set -gx https_proxy "{{ .https }}"
        {{- end }}
        {{- if .no_proxy }}
set -gx NO_PROXY "{{ .no_proxy }}"
set -gx no_proxy "{{ .no_proxy }}"
        {{- end }}
    {{- end }}
{{- end }}

# Initialize starship prompt when available.
if type -q starship
    starship init fish | source
end

# zoxide improves directory navigation.
if type -q zoxide
    set -gx _ZO_EXCLUDE_DIRS '**/node_modules/**:**/target/**:**/.git/**:**/tmp/**:**/temp/**:**/.cache/**'
    zoxide init fish --cmd=cd | source
end

# Bun
if test -d "$BUN_INSTALL/bin"
    fish_add_path $BUN_INSTALL/bin
end

# Cargo/Rust (ensure the toolchain is prioritized).
if test -d "$HOME/.cargo/bin"
    fish_add_path $HOME/.cargo/bin
end

# Keychain helpers (edit ~/.config/fish/keychain-secrets.fish for mappings)
function __load_secret_from_keychain --argument-names var service
    set -l value ""
    if type -q keychainctl
        set value (keychainctl get $service 2>/dev/null)
        if test $status -ne 0
            set value ""
        end
    else if type -q security
        set value (security find-generic-password -w -a $USER -s $service 2>/dev/null)
    end

    if test -n "$value"
        set -gx $var $value
    end
end

if test -f $HOME/.config/fish/keychain-secrets.fish
    source $HOME/.config/fish/keychain-secrets.fish
end

if type -q keychainctl
    function keychain-set --description 'Add or update a keychain secret'
        keychainctl set $argv
    end
    function keychain-get --description 'Print a keychain secret to stdout'
        keychainctl get $argv
    end
    function keychain-rm --description 'Remove a keychain secret'
        keychainctl delete $argv
    end
    function keychain-ls --description 'List keychain secrets for the current user'
        keychainctl list $argv
    end
end

# rbenv init
if type -q rbenv
    rbenv init - fish | source
end

# Kiro shell integration
if test "$TERM_PROGRAM" = "kiro"
    source (kiro --locate-shell-integration-path fish)
end

# Google Cloud SDK
if test -f '/opt/homebrew/share/google-cloud-sdk/path.fish.inc'
    source '/opt/homebrew/share/google-cloud-sdk/path.fish.inc'
end

# Bell after every command completion.
function fish_postexec
    echo -ne '\a'
end
