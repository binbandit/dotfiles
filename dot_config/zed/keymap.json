// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    "context": "Workspace",
    "bindings": {
      // "shift shift": "file_finder::Toggle"
      "space f p": "projects::OpenRecent",
      "cmd-k": ["projects::OpenRecent", { "create_new_window": false }]
    }
  },
  {
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "j k": "vim::NormalBefore",
      "j j": "vim::NormalBefore"
    }
  },

  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      "space g h d": "editor::ToggleSelectedDiffHunks",
      "space g l": "editor::CopyPermalinkToLine",

      // Toggle recent projects
      "space f p": "projects::OpenRecent",
      "space b": "editor::ToggleGitBlame",
      "space d": "diagnostics::Deploy",
      "space o": "tab_switcher::Toggle",
      "n": "search::SelectNextMatch",
      "shift-n": "search::SelectPreviousMatch",
      ", 1": ["pane::ActivateItem", 0],
      ", 2": ["pane::ActivateItem", 1],
      ", 3": ["pane::ActivateItem", 2],
      ", 4": ["pane::ActivateItem", 3],
      ", 5": ["pane::ActivateItem", 4],
      ", 6": ["pane::ActivateItem", 5],
      ", 7": ["pane::ActivateItem", 6],
      ", 8": ["pane::ActivateItem", 7]
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      // Window movement bindings
      // Ctrl jklk to move between panes
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",

      // Toggle inlay hints
      "space t i": "editor::ToggleInlayHints",

      // +LSP
      "space c a": "editor::ToggleCodeActions",
      "space .": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      "shift-k": "editor::Hover",
      "space l f": "editor::Format",

      // Project search
      "space /": "pane::DeploySearch",

      // Toggle find file
      "space f f": "file_finder::Toggle",
      "space space": "file_finder::Toggle",

      // Open file finder
      "space e": "pane::RevealInProjectPanel",
      "space w": "workspace::Save",
      "+ +": "workspace::Save",
      "g b": "editor::ToggleComments",
      "space g f": "editor::CopyPermalinkToLine"
    }
  },
  // Comment Code
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      // Visual, visual line & visual block modes
      "g c": "editor::ToggleComments",
      "cmd-/": "editor::ToggleComments",
      "shift-j": "editor::MoveLineDown",
      "shift-k": "editor::MoveLineUp",
      "shift-s": "vim::PushAddSurrounds",
      "shift-x": "vim::Exchange"
    }
  },
  // Rename
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "r": "editor::Rename" // zed specific
    }
  },
  // Code Action
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "a": "editor::ToggleCodeActions" // zed specific
    }
  },
  // Toggle Terminal
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-\\": "terminal_panel::ToggleFocus",
      "space t": "workspace::NewCenterTerminal"
    }
  },
  {
    "context": "VimControl && !menu && vim_mode != operator",
    "bindings": {
      "w": "vim::NextSubwordStart",
      "b": "vim::PreviousSubwordStart",
      "e": "vim::NextSubwordEnd",
      "g e": "vim::PreviousSubwordEnd"
    }
  },
  {
    "context": "VimControl && !menu",
    "bindings": {
      "left": "vim::WrappingLeft",
      "right": "vim::WrappingRight",
      "h": "vim::WrappingLeft",
      "l": "vim::WrappingRight"
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      "q": "vim::AnyQuotes",
      "b": "vim::AnyBrackets",
      "Q": "vim::MiniQuotes",
      "B": "vim::MiniBrackets"
    }
  },
  {
    "context": "ProjectPanel",
    "bindings": {
      "escape": "workspace::ToggleLeftDock"
    }
  }
]
