#!/usr/bin/env bash
set -euo pipefail

REPO="${CHEZMOI_SOURCE_DIR:-$HOME/.local/share/chezmoi}"
LOCK_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/chezmoi-sync.lock"
LOG_FILE="${XDG_CACHE_HOME:-$HOME/.cache}/chezmoi-sync.log"
HOSTNAME_SHORT=$(hostname -s 2>/dev/null || hostname)

{{- $root := . -}}
{{- $data := fromToml (include ".chezmoidata.toml") -}}
{{- $defaults := $data.defaults | default (dict) -}}
{{- $host := (index ($data.hosts | default (dict)) .chezmoi.hostname) | default (dict) -}}
{{- $syncDefaults := (index $defaults "sync") | default (dict) -}}
{{- $syncHost := (index $host "sync") | default (dict) -}}
{{- $pullInterval := (index $syncHost "pull_interval_minutes") | default ((index $syncDefaults "pull_interval_minutes") | default 10) -}}
{{- $debounceMs := (index $syncHost "watcher_debounce_ms") | default ((index $syncDefaults "watcher_debounce_ms") | default 750) -}}
PULL_INTERVAL_MINUTES={{ $pullInterval }}
WATCHER_DEBOUNCE_MS={{ $debounceMs }}

log() {
  mkdir -p "$(dirname "$LOG_FILE")"
  local msg
  msg="[$(date '+%Y-%m-%dT%H:%M:%S%z')] $*"
  printf '%s\n' "$msg" >>"$LOG_FILE"
}

with_lock() {
  (
    while ! mkdir "$LOCK_DIR" 2>/dev/null; do
      sleep 0.2
    done
    trap 'rmdir "$LOCK_DIR" >/dev/null 2>&1' EXIT INT TERM
    "$@"
  )
}

ensure_repo() {
  if [ ! -d "$REPO/.git" ]; then
    log "chezmoi repo not initialized at $REPO"
    echo "chezmoi repository not found at $REPO" >&2
    exit 1
  fi
}

sync_pull() {
  ensure_repo
  with_lock _pull_impl
}

_pull_impl() {
  cd "$REPO"
  if ! chezmoi git status >/dev/null 2>&1; then
    log "chezmoi git not ready"
    return 0
  fi

  if ! chezmoi git pull --rebase --autostash >/dev/null 2>&1; then
    log "git pull failed"
    return 1
  fi

  if ! chezmoi apply --force --keep-going --no-pager >/dev/null 2>&1; then
    log "chezmoi apply failed"
    return 1
  fi

  return 0
}

sync_push() {
  ensure_repo
  with_lock _push_impl
}

_push_impl() {
  cd "$REPO"
  if ! chezmoi git status >/dev/null 2>&1; then
    log "chezmoi git not ready"
    return 0
  fi

  if chezmoi git status --porcelain | grep -q '.'; then
    chezmoi git add -A
    commit_msg="chore(sync): ${HOSTNAME_SHORT} $(date '+%Y-%m-%d %H:%M:%S')"
    if chezmoi git commit -m "$commit_msg" >/dev/null 2>&1; then
      if ! chezmoi git push >/dev/null 2>&1; then
        log "git push failed"
        return 1
      fi
    fi
  fi

  return 0
}

watch_loop() {
  ensure_repo
  local debounce
  debounce=$(awk "BEGIN { printf '%.3f', ${WATCHER_DEBOUNCE_MS}/1000 }")

  sync_pull || true

  if command -v fswatch >/dev/null 2>&1; then
    log "starting fswatch watcher"
    fswatch -0 -or --event Updated --event Created --event Removed --event Renamed -e "$REPO/.git" "$REPO" | \
      while IFS= read -r -d '' _; do
        sleep "$debounce"
        sync_push || true
        sync_pull || true
      done
  elif command -v inotifywait >/dev/null 2>&1; then
    log "starting inotifywait watcher"
    inotifywait -m -r -e modify,create,delete,move --exclude '(^|/)\\.git(/|$)' --format '%w%f' "$REPO" | \
      while IFS= read -r _; do
        sleep "$debounce"
        sync_push || true
        sync_pull || true
      done
  else
    log "no filesystem watcher available"
    echo "Missing fswatch/inotifywait" >&2
    exit 1
  fi
}

case "${1:-watch}" in
  pull)
    sync_pull
    ;;
  push)
    sync_push
    ;;
  watch)
    watch_loop
    ;;
  status)
    ensure_repo
    chezmoi git status
    ;;
  *)
    cat <<USAGE
Usage: chezmoi-sync [pull|push|watch|status]
USAGE
    exit 1
    ;;
esac
